import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Icon } from "@iconify/react/dist/iconify.js";
import { Control } from "react-hook-form";

type WorkerFormProps = {
  index: number;
  control: Control<any>;
  onRemove: () => void;
  isRemovable: boolean;
};

export const WorkerForm = ({
  index,
  control,
  onRemove,
  isRemovable,
}: WorkerFormProps) => {
  // Activities
  const activities = [
    { id: "ุงููุทุงุนู ูุงูููุงูู ูุงูููุงุฏู", name: "ุงููุทุงุนู ูุงูููุงูู ูุงูููุงุฏู" },
    {
      id: "ุงูุจูุงุก ูุงูุตูุงูุฉ ูุงูุฎุฏูุงุช ุงููููุฉ",
      name: "ุงูุจูุงุก ูุงูุตูุงูุฉ ูุงูุฎุฏูุงุช ุงููููุฉ",
    },
    { id: "ุงูุฑุนุงูุฉ ุงูุตุญูุฉ", name: "ุงูุฑุนุงูุฉ ุงูุตุญูุฉ" },
    { id: "ุชูููููุฌูุง ุงููุนูููุงุช", name: "ุชูููููุฌูุง ุงููุนูููุงุช" },
    {
      id: "ุงููุจูุนุงุช ูุงููุดุชุฑูุงุช ูุงูุชุณููู",
      name: "ุงููุจูุนุงุช ูุงููุดุชุฑูุงุช ูุงูุชุณููู",
    },
    {
      id: "ุตุงูููุงุช ุงูุชุฌููู ูุฎุฏูุงุช ุงููุณุงุฌ",
      name: "ุตุงูููุงุช ุงูุชุฌููู ูุฎุฏูุงุช ุงููุณุงุฌ",
    },
  ];

  // Nationalities
  const nationalities = [
    { id: "ููุจููู", name: "๐ต๐ญ ููุจููู" },
    { id: "ููุจุงูู", name: "๐ณ๐ต ููุจุงูู" },
    { id: "ููุฏู", name: "๐ฎ๐ณ ููุฏู" },
    { id: "ุจูุบูุงุฏูุดู", name: "๐ง๐ฉ ุจูุบุงูู" },
    { id: "ุจุงูุณุชุงูู", name: "๐ต๐ฐ ุจุงูุณุชุงูู" },
  ];

  // Job positions
  const positions = [
    { id: "ุนุงูู ุจูุงุก", name: "ุนุงูู ุจูุงุก" },
    { id: "ุณุงุฆู", name: "ุณุงุฆู" },
    { id: "ููุฑุจุงุฆู", name: "ููุฑุจุงุฆู" },
    { id: "ุณุจุงู", name: "ุณุจุงู" },
    { id: "ุญุงุฑุณ", name: "ุญุงุฑุณ" },
    { id: "ูุฌุงุฑ", name: "ูุฌุงุฑ" },
  ];

  return (
    <Card className="bg-white shadow-sm">
      <CardContent className="p-4">
        <div className="flex justify-between items-center mb-4">
          <h4 className="font-medium text-gray-800 flex items-center">
            <Icon
              icon="fluent-emoji:person"
              className="ml-2"
              width="18"
              height="18"
            />
            ุนุงูู {index + 1}
          </h4>
          {isRemovable && (
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={onRemove}
              className="text-red-500 hover:text-red-700 hover:bg-red-50"
            >
              <Icon icon="heroicons:trash" width="18" height="18" />
            </Button>
          )}
        </div>

        <div className="grid grid-cols-1 gap-4 mb-4">
          <FormField
            control={control}
            name={`workers.${index}.activity`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-gray-700 text-sm">ุงููุดุงุท</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="ุงุฎุชุฑ ุงููุดุงุท" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {activities.map((activity) => (
                      <SelectItem key={activity.id} value={activity.id}>
                        {activity.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <FormField
            control={control}
            name={`workers.${index}.position`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-gray-700 text-sm">
                  ุงููุณูู ุงููุธููู
                </FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="ุงุฎุชุฑ ุงููุณูู ุงููุธููู" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {positions.map((position) => (
                      <SelectItem key={position.id} value={position.id}>
                        {position.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={control}
            name={`workers.${index}.nationality`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-gray-700 text-sm">ุงูุฌูุณูุฉ</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="ุงุฎุชุฑ ุงูุฌูุณูุฉ" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {nationalities.map((nationality) => (
                      <SelectItem key={nationality.id} value={nationality.id}>
                        {nationality.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <FormField
            control={control}
            name={`workers.${index}.quantity`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-gray-700 text-sm">ุงููููุฉ</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    min="1"
                    {...field}
                    onChange={(e) =>
                      field.onChange(parseInt(e.target.value, 10))
                    }
                    placeholder="ุฃุฏุฎู ุงููููุฉ"
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={control}
            name={`workers.${index}.salary`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-gray-700 text-sm">
                  ุงูุฑุงุชุจ (ุฑูุงู)
                </FormLabel>
                <FormControl>
                  <Input
                    type="text"
                    {...field}
                    placeholder="ุชููุงุฆู"
                    title="ุงูุฑุงุชุจ ุงููุชููุน"
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={control}
            name={`workers.${index}.price`}
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-gray-700 text-sm">
                  ุณุนุฑ ุงูููู
                </FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    min="0"
                    step="0.01"
                    {...field}
                    onChange={(e) => field.onChange(parseFloat(e.target.value))}
                    placeholder="ุชููุงุฆู"
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
      </CardContent>
    </Card>
  );
};
